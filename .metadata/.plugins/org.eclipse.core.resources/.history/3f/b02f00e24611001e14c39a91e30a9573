package com.example.sqlstoredprocedure.entity;

import java.time.LocalDateTime;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedStoredProcedureQuery;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.StoredProcedureParameter;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "branch")
@NamedStoredProcedureQuery(
        name = "Branch.create",
        procedureName = "add_branch",
        parameters = {
        		@StoredProcedureParameter(mode = ParameterMode.IN, name = "p_branch_name", type = String.class),
                @StoredProcedureParameter(mode = ParameterMode.IN, name = "p_branch_location", type = String.class),
                @StoredProcedureParameter(mode = ParameterMode.IN, name = "p_status", type = Character.class)
        }
)
@NamedStoredProcedureQuery(
	    name = "Branch.getAll",
	    procedureName = "getAllBranches",
	    resultClasses = Branch.class
	)

public class Branch {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "branch_id")
    private Long branchId;

    @Column(name = "branch_name")
    private String branchName;

    @Column(name = "branch_location")
    private String branchLocation;

    @Column(name = "status", columnDefinition = "CHAR(1) DEFAULT 'P' CHECK (status IN ('A', 'P'))")
    private char status;
    @Column(columnDefinition = "int default 1")
    private int version;
    @Column(updatable = false)
    private LocalDateTime createdDate;

    private LocalDateTime modifiedDate;
    
    @PrePersist
    protected void onCreate() {
        createdDate = LocalDateTime.now();
        modifiedDate = LocalDateTime.now();
    }

    @PreUpdate
    protected void onUpdate() {
        modifiedDate = LocalDateTime.now();
    }


}
