package com.example.sqlstoredprocedure.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.sqlstoredprocedure.service.CustomerService;

import java.math.BigInteger;
import java.util.List;
import com.example.sqlstoredprocedure.entity.Customer;

@RestController
public class CustomerController {
	@Autowired
	private CustomerService customerService;
	
	
	 @GetMapping("/customers")
	    public ResponseEntity<List<Customer>> getAllCustomers() {
	        List<Customer> customers = customerService.getAllCustomers();
	        return ResponseEntity.ok(customers);
	    }
	 @PostMapping("/customers")
	    public ResponseEntity<Customer> addCustomer(@RequestBody Customer customer) {
	        return ResponseEntity.ok(customerService.addCustomer(customer));
);
	    }
	 @GetMapping("customers/{id}")
	    public ResponseEntity<Customer> getCustomer(@PathVariable("id") Long id) {
	        Customer customer = customerService.getCustomer(id);
	        if (customer != null) {
	            return ResponseEntity.ok(customer);
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }
	 
	 @DeleteMapping("customers/{id}")
	    public ResponseEntity<String> deleteCustomer(@PathVariable("id") Long id) {
		 	customerService.deleteCustomer(id);
	        return ResponseEntity.ok("Customer deleted successfully");
	    }
	    @PutMapping("customers/{id}")
	    public ResponseEntity<String> updateCustomer(
	            @PathVariable("id") Long id,
	            @RequestBody Customer customer) {
	        
	        Customer updatedCustomer = customerService.updateCustomer(id, customer);
	        
	        if (updatedCustomer != null) {
	            return ResponseEntity.ok("Customer with ID " + id + " updated successfully.");
	        } else {
	            return ResponseEntity.notFound().build();
	        }
	    }

	
	
	
}
